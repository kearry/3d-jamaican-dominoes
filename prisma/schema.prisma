// prisma/schema.prisma

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  preferences   String?   // JSON string for user preferences
  accounts      Account[]
  sessions      Session[]
  games         Game[]
  players       Player[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Player {
  id        String      @id @default(cuid())
  userId    String?
  user      User?       @relation(fields: [userId], references: [id])
  gameId    String
  game      Game        @relation(fields: [gameId], references: [id], onDelete: Cascade)
  score     Int         @default(0)
  isAI      Boolean     @default(false)
  hand      String?     // JSON string for player's dominoes
  roundsWon GameRound[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Game {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  ownerId   String
  owner     User        @relation(fields: [ownerId], references: [id])
  players   Player[]
  rounds    GameRound[]
  status    String      @default("waiting") // waiting, playing, completed
  gameState String?     // JSON string for game state
}

model GameRound {
  id        String   @id @default(cuid())
  gameId    String
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  winnerId  String?
  winner    Player?  @relation(fields: [winnerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}